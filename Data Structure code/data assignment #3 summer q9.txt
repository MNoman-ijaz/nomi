//#include<iostream>
//#include<queue>>
//using namespace std;
//class heap
//{
//public:
//	int arr[100];
//	int size;
//	heap()
//	{
//		arr[0] = -1;
//		size = 0;
//	}
//	void insert(int val)
//	{
//		size = size + 1;
//		int index = size;
//		arr[index] = val;
//		while (index > 1)
//		{
//			int parent = index / 2;
//			if (arr[parent] < arr[index])
//			{
//				swap(arr[parent], arr[index]);
//				index = parent;
//			}
//			else
//			{
//				return;
//			}
//		}
//	}
//	void deleteheap()
//	{
//		if (size == 0)
//		{
//			cout << "Nothing to delete " << endl;
//			return;
//		}
//		//step 1 -> put last elemenent into first index
//		arr[1] = arr[size];
//		// step 2 -> remove last element 
//		size--;
//		//step 3 -> Take root node to its correct position
//		int i = 1;
//		while (i < size)
//		{
//			int leftindex = 2 * i;
//			int rightindex = 2 * i + 1;
//			if (leftindex < size&&arr[i] < arr[leftindex])
//			{
//				swap(arr[i], arr[leftindex]);
//				i = leftindex;
//			}
//			else if (rightindex < size &&arr[i] < arr[rightindex])
//			{
//				swap(arr[i], arr[rightindex]);
//				i = rightindex;
//			}
//			else
//			{
//				return;
//			}
//		}
//
//	}
//	void heapifymin(int arr[], int n, int i)
//	{
//		int smallest = i;
//		int left = 2 * i + 1;
//		int right = 2 * i + 2;
//		if (left<n&&arr[smallest]>arr[left])
//		{
//			smallest = left;
//		}
//		if (right<n&&arr[smallest]>arr[right])
//		{
//			smallest = right;
//		}
//		if (smallest != i)
//		{
//			swap(arr[smallest], arr[i]);
//			heapifymin(arr, n, smallest);
//		}
//	}
//	void print()
//	{
//		for (int i = 0; i <= size; i++)
//		{
//			cout << arr[i] << " ";
//		}
//		cout << endl;
//	}
//
//};
//void heapify(int arr[], int n, int i)
//{
//	int largest = i;
//	int leftin = 2 * i;
//	int rightin = 2 * i + 1;
//	if (leftin <= n && arr[largest] < arr[leftin])
//	{
//		largest = leftin;
//	}
//	if (rightin <= n && arr[largest] < arr[rightin])
//	{
//		largest = rightin;
//	}
//	if (largest != i)
//	{
//		swap(arr[largest], arr[i]);
//		heapify(arr, n, largest);
//	}
//}
//void heapsort(int arr[], int n)
//{
//	int size = n;
//	while (size > 1)
//	{
//		//step1 swap first ko last k sath 
//		swap(arr[size], arr[1]);
//		size--;
//		//step 2
//		heapify(arr, size, 1);
//	}
//}
//int main()
//{
//	heap h;
//	h.insert(55);
//	h.insert(53);
//	h.insert(50);
//	h.insert(52);
//	h.insert(54);
//	h.insert(45);
//
//	h.insert(51);
//	h.insert(49);
//	h.print();
//	h.deleteheap();
//	h.print();
//
//	int arr[6] = { -1,54,53,55,52,50 };
//	int n = 5;
//	//heap creation
//	for (int i = n / 2; i > 0; i--)
//	{
//		heapify(arr, n, i);
//	}
//	cout << "printing the array  now " << endl;
//	for (int i = 1; i <= n; i++)
//	{
//		cout << arr[i] << " ";
//	}cout << endl;
//	//heapsort
//	heapsort(arr, n);
//	cout << "printing sorted array " << endl;
//	for (int i = 0; i <= n; i++)
//	{
//		cout << arr[i] << " ";
//	}cout << endl;
//	//using priority queue
//	cout << "Using priority Queue " << endl;
//	priority_queue<int>pq;
//	pq.push(4);
//	pq.push(2);
//	pq.push(5);
//	pq.push(3);
//	cout << "element at the top " << pq.top() << endl;
//	pq.pop();
//	cout << "element at the top " << pq.top() << endl;
//	cout << "The size is " << pq.size() << endl;
//	//min heap
//	priority_queue<int, vector<int>, greater<int> > minheap;
//	minheap.push(4);
//	minheap.push(2);
//	minheap.push(5);
//	minheap.push(3);
//	cout << "element at the top " << pq.top() << endl;
//	pq.pop();
//	cout << "element at the top " << pq.top() << endl;
//	cout << "The size is " << pq.size() << endl;
//
//	system("pause");
//	return 0;
//}
#include <iostream>
using namespace std;
struct TreeNode 
{
	int val;
	TreeNode* left;
	TreeNode* right;
	TreeNode(int v) : val(v), left(nullptr), right(nullptr) {}
};
// Helper function to find the maximum value in the binary tree
int findMax(TreeNode* root) {
	if (root == nullptr)
		return INT_MIN;

	int maxVal = root->val;
	int leftMax = findMax(root->left);
	int rightMax = findMax(root->right);

	if (leftMax > maxVal)
		maxVal = leftMax;
	if (rightMax > maxVal)
		maxVal = rightMax;

	return maxVal;
}

// Recursive function to delete the node with the maximum value in the binary tree
TreeNode* deleteMax(TreeNode* root, int maxVal) {
	if (root == nullptr)
		return nullptr;

	if (root->val == maxVal) {
		if (root->left == nullptr) {
			TreeNode* temp = root->right;
			delete root;
			return temp;
		}
		if (root->right == nullptr) {
			TreeNode* temp = root->left;
			delete root;
			return temp;
		}

		// If the node has both left and right subtrees,
		// find the inorder successor (smallest value in the right subtree)
		// and replace the node with it.
		TreeNode* inorderSuccessor = root->right;
		while (inorderSuccessor->left != nullptr)
			inorderSuccessor = inorderSuccessor->left;

		root->val = inorderSuccessor->val;
		root->right = deleteMax(root->right, inorderSuccessor->val);
	}
	else if (root->val < maxVal) {
		root->right = deleteMax(root->right, maxVal);
	}
	else {
		root->left = deleteMax(root->left, maxVal);
	}

	return root;
}

// Helper function to print the tree (for visualization)
void inorderTraversal(TreeNode* root) {
	if (root == nullptr) return;
	inorderTraversal(root->left);
	std::cout << root->val << " ";
	inorderTraversal(root->right);
}

int main() {
	// Create a sample binary tree
	TreeNode* root = new TreeNode(8);
	root->left = new TreeNode(4);
	root->right = new TreeNode(12);
	root->left->left = new TreeNode(2);
	root->left->right = new TreeNode(6);
	root->right->left = new TreeNode(10);
	root->right->right = new TreeNode(14);

	std::cout << "Original tree: ";
	inorderTraversal(root);
	std::cout << std::endl;

	int maxVal = findMax(root);
	root = deleteMax(root, maxVal);

	std::cout << "Tree after deleting the maximum element (" << maxVal << "): ";
	inorderTraversal(root);
	std::cout << std::endl;
	system("pause");
	return 0;
}
