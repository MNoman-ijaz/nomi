#include<iostream>
using namespace std;
class Node
{
public:
	int data;               //Doubly Link list 
	Node* prev;
	Node* next;
	Node(int d)
	{
		this->data = d;
		this->prev = NULL;
		this->next = NULL;
	}
};
	//traversing a link list
	void print(Node* Head)
	{
	Node* temp = Head;
		while (temp!=NULL)
		{
			cout << temp->data << " ";
			temp = temp->next;
		}
		cout << endl;
	}
	int getlength(Node* Head) //gives  length of link list
	{
		Node* temp = Head;
		int len = 0;
		while (temp!=NULL)
		{
		   
			len++;
			temp = temp->next;
		}
		return len;
	}
	void insertatHead(Node* &Head, int d)
	{
		if (Head==NULL)
		{
			Node* temp = new Node(d);
			Head = temp;
		}
		else
		{
			Node* temp = new Node(d);
		  	temp->next = Head;
			Head->prev = temp;
			Head = temp;
		}
	}
	void insertattail(Node* &tail,int d)
	{
		if (tail==NULL)
		{
			Node* temp = new Node(d);
			tail = temp;
		}
		else
		{
			Node* temp = new Node(d);
			tail->next = temp;
			temp->prev = tail;
			tail = temp;
		}
	}
	void insertatpos(Node* &tail,Node* &Head,int pos ,int d)
	{
		//insert at start
		if (pos == 1)
		{
			insertatHead(Head,d);
			return;
		}
		Node* temp = Head;
		int cnt = 1;
		while (cnt < pos - 1)
		{
			temp = temp->next;
			cnt++;
		}
		//insert at last position
		if (temp->next==NULL)
		{
			insertattail(tail, d);
			return;
		}
		//creating a node for d
		Node* nodetoinsert = new Node(d);
		nodetoinsert->next = temp->next;
		temp->next->prev = nodetoinsert;
		temp->next = nodetoinsert;
		nodetoinsert->prev = temp;
	}
	void deleteNod(int pos,Node* &Head)
	{
		if (pos == 1)
		{
			Node*temp = Head;
			Head = Head->next;
			temp->next->prev = NULL;                     //memory free start Node
			Head = temp->next;
			temp->next = NULL;
			delete temp;
		}
		else
		{
			//deleting any middle node or last node
			Node* curr = Head;
			Node* prev = NULL;
			int cnt = 1;
			while (cnt < pos)
			{
				prev = curr;
				curr = curr->next;
				cnt++;
			}
			curr->prev = NULL;
			prev->next = curr->next;
			curr->next = NULL;  
			delete curr;
		}
	}
int main()
{
	Node* node1 = new Node(10);
	Node* Head = NULL;
	Node* tail = NULL;
	print(Head);
	//cout << getlength(Head) << endl;
	insertatHead(Head, 12);
	print(Head);

	insertatHead(Head, 14);
	print(Head);
	insertatHead(Head, 16);
	print(Head);
	insertattail(tail,8);
	print(Head);
	insertatpos(tail, Head, 1, 100);
	print(Head);
	insertatpos(tail, Head, 2, 200);
	print(Head);
	insertatpos(tail, Head, 3, 300);
	print(Head);
	deleteNod(4, Head);
	print(Head);
	system("pause");
}