#include<iostream>
using namespace std;
class Node
{
public:
	int data;
	Node* left;
	Node* right;
	Node(int d)
	{
		data = d;
		left = NULL;
		right = NULL;
	}
};
void preorder(Node* root)
{
	if (root == NULL)
	{
		return;
	}
	cout << root->data << " ";
	preorder(root->left);
	preorder(root->right);
} 
void inorder(Node* root)
{
	if (root==NULL)
	{
		return;
	}
	inorder(root->left);
	cout << root->data << " ";
	inorder(root->right);
}
void postorder(Node*root)
{
	if (root==NULL)
	{
		return;
	}
	postorder(root->left);
	postorder(root->right);
	cout << root->data << " ";
}
int main()
{
	Node* root = new Node(1);
	root->left = new Node(2);
	root->right = new Node(3);
	root->left->left = new Node(4);
	root->left->right = new Node(5);
	root->right->left = new Node(6);
	root->right->right = new Node(7);
	root->left->left->left = new Node(8);
	root->left->left->right= new Node(9);
	root->left->left->left->left= new Node(16);
	root->left->left->left->right = new Node(17);
	root->left->right->left = new Node(10);
	root->left->right->left->left = new Node(20);
	root->left->right->left->right = new Node(21);
	root->left->right->left = new Node(11);
	root->left->right->left->left = new Node(22);
	root->left->right->right->right = new Node(23);
	root->right->left->left = new Node(12);
	root->right->left->right = new Node(13);
	root->right->left->left->left = new Node(24);
	root->right->left->left->right = new Node(25);
	root->right->left->right->left = new Node(26);
	root->right->left->right->right = new Node(27);
	root->right->right->left = new Node(14);
	root->right->right->left = new Node(15);
	root->right->right->left->left = new Node(28);
	root->right->right->left->right = new Node(29);
	root->right->right->right->left = new Node(30);
	root->right->right->right->right = new Node(31);

	  preorder(root);
	inorder(root);
	postorder(root);
	system("pause");
}