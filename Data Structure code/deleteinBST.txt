#include<iostream>
using namespace std;
struct Node
{
public:
	int data;
	Node*left, *right;
	Node(int va)
	{
		data = va;
		left = NULL;
		right = NULL;
	}
};
Node* searchinBST(Node* root,int key)
{
	if (root==NULL)
	{
		return NULL;
	}
	if (root->data==key)
	{
		return root;
	}
	 //key>data
	if (root->data>key)
	{
		return searchinBST(root->left, key);
	}
	//data<key
	return searchinBST(root->right, key);
}
Node* inordersucc(Node* root)
{
	Node* curr = root;
	while (curr&&curr->left!=NULL)
	{
		curr = curr->left;
	}
	return curr;
}
Node* deleteinBST(Node* root, int key)
{
	if (key<root->data)
	{
		root->left = deleteinBST(root->left, key);
	}
	else if (key > root->data)
	{
		root->right = deleteinBST(root->right, key);
	}
	else
	{
		if (root->left==NULL)
		{
			Node* temp = root->right;
			free(root);
			return temp;
		}
		else if (root->right == NULL)
		{
			Node* temp = root->left;
			free(root);
			return temp;
		}
		//case 3
		Node* temp = inordersucc(root->right);
		root->data = temp->data;
		root->right = deleteinBST(root->right, temp->key);
	}
	return root;
}
void inorder(Node* root)
{
	if (root==NULL)
	{
		return;
	}
	inorder(root->left);
	cout << root->data << " ";
	inorder(root->right);

}
int main()
{
	Node* root = new Node(4);
	root->left = new Node(2);
	root->right = new Node(5);
	root->left->left = new Node(1);
	root->left->right = new Node(3);
	root->right->right = new Node(6);
	inorder(root);
	cout << endl;
	root = deleteinBST(root, 5);
	inorder(root);
	cout << endl;
	system("pause");
}